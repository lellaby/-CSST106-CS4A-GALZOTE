# -*- coding: utf-8 -*-
"""4A-GALZOTE-MP1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mm1iXmnWy4UvVVgFiYeQeFIFWTA7c3_M
"""

!pip install mediapipe opencv-python-headless matplotlib

from google.colab import files
uploaded = files.upload()

import cv2
import mediapipe as mp
import numpy as np
import matplotlib.pyplot as plt
import time

mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

pose = mp_pose.Pose()

video_path = 'your_uploaded_video.mp4'
cap = cv2.VideoCapture(video_path)

frame_count = 0

while cap.isOpened():
    ret, frame = cap.read()

    if not ret:
        print("End of video reached")
        break

    frame_count += 1

    image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)

    if results.pose_landmarks:
        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

    output_frame_path = f'output_frame_{frame_count}.png'
    cv2.imwrite(output_frame_path, frame)

    if frame_count > 10:
        break

cap.release()
cv2.destroyAllWindows()

img = cv2.imread('output_frame_1.png')
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

def calculate_velocity(prev_landmarks, current_landmarks, joint_index, time_interval):
    if prev_landmarks and current_landmarks:
        prev_joint = np.array([prev_landmarks[joint_index].x, prev_landmarks[joint_index].y])
        curr_joint = np.array([current_landmarks[joint_index].x, current_landmarks[joint_index].y])
        velocity = np.linalg.norm(curr_joint - prev_joint) / time_interval
        return velocity
    return 0

prev_landmarks = None
time_interval = 0.1
speed_threshold = 0.05

while cap.isOpened():
    ret, frame = cap.read()

    if not ret:
        break

    image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)

    if results.pose_landmarks:
        current_landmarks = results.pose_landmarks.landmark
        velocity = calculate_velocity(prev_landmarks, current_landmarks, 15, time_interval)
        prev_landmarks = current_landmarks

        if velocity > speed_threshold:
            feedback = "Slow down your wrist!"
        else:
            feedback = "Good speed!"

        cv2.putText(frame, feedback, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    output_frame_path = f'feedback_frame_{frame_count}.png'
    cv2.imwrite(output_frame_path, frame)

    if frame_count > 10:
        break

cap.release()

img = cv2.imread('feedback_frame_1.png')

if img is None:
    print("Error: Could not read image file.")
else:
    plt.figure(figsize=(10, 10))
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.show()